// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/qproxy.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc/qproxy.proto

It has these top-level messages:
	QueueId
	ListQueuesRequest
	ListQueuesResponse
	GetQueueRequest
	GetQueueResponse
	CreateQueueRequest
	CreateQueueResponse
	DeleteQueueRequest
	DeleteQueueResponse
	ModifyQueueRequest
	ModifyQueueResponse
	PurgeQueueRequest
	PurgeQueueResponse
	MessageReceipt
	FailedPublish
	Message
	AckMessagesRequest
	AckMessagesResponse
	GetMessagesRequest
	GetMessagesResponse
	PublishMessagesRequest
	PublishMessagesResponse
	ModifyAckDeadlineRequest
	ModifyAckDeadlineResponse
	HealthcheckRequest
	HealthcheckResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueueId struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name"`
}

func (m *QueueId) Reset()                    { *m = QueueId{} }
func (m *QueueId) String() string            { return proto.CompactTextString(m) }
func (*QueueId) ProtoMessage()               {}
func (*QueueId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueueId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *QueueId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListQueuesRequest struct {
	Namespace  string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace"`
	Filter     string `protobuf:"bytes,2,opt,name=Filter" json:"Filter"`
	RPCTimeout int64  `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *ListQueuesRequest) Reset()                    { *m = ListQueuesRequest{} }
func (m *ListQueuesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListQueuesRequest) ProtoMessage()               {}
func (*ListQueuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListQueuesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListQueuesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListQueuesRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type ListQueuesResponse struct {
	Queues []*QueueId `protobuf:"bytes,1,rep,name=Queues" json:"Queues"`
}

func (m *ListQueuesResponse) Reset()                    { *m = ListQueuesResponse{} }
func (m *ListQueuesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListQueuesResponse) ProtoMessage()               {}
func (*ListQueuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListQueuesResponse) GetQueues() []*QueueId {
	if m != nil {
		return m.Queues
	}
	return nil
}

type GetQueueRequest struct {
	Id         *QueueId `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	RPCTimeout int64    `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *GetQueueRequest) Reset()                    { *m = GetQueueRequest{} }
func (m *GetQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetQueueRequest) ProtoMessage()               {}
func (*GetQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetQueueRequest) GetId() *QueueId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetQueueRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type GetQueueResponse struct {
	Attributes map[string]string `protobuf:"bytes,1,rep,name=Attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetQueueResponse) Reset()                    { *m = GetQueueResponse{} }
func (m *GetQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetQueueResponse) ProtoMessage()               {}
func (*GetQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetQueueResponse) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type CreateQueueRequest struct {
	Id         *QueueId          `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=Attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RPCTimeout int64             `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *CreateQueueRequest) Reset()                    { *m = CreateQueueRequest{} }
func (m *CreateQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateQueueRequest) ProtoMessage()               {}
func (*CreateQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateQueueRequest) GetId() *QueueId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CreateQueueRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CreateQueueRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type CreateQueueResponse struct {
}

func (m *CreateQueueResponse) Reset()                    { *m = CreateQueueResponse{} }
func (m *CreateQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateQueueResponse) ProtoMessage()               {}
func (*CreateQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteQueueRequest struct {
	Id         *QueueId `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	RPCTimeout int64    `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *DeleteQueueRequest) Reset()                    { *m = DeleteQueueRequest{} }
func (m *DeleteQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteQueueRequest) ProtoMessage()               {}
func (*DeleteQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteQueueRequest) GetId() *QueueId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeleteQueueRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type DeleteQueueResponse struct {
}

func (m *DeleteQueueResponse) Reset()                    { *m = DeleteQueueResponse{} }
func (m *DeleteQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteQueueResponse) ProtoMessage()               {}
func (*DeleteQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ModifyQueueRequest struct {
	Id         *QueueId          `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=Attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RPCTimeout int64             `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *ModifyQueueRequest) Reset()                    { *m = ModifyQueueRequest{} }
func (m *ModifyQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyQueueRequest) ProtoMessage()               {}
func (*ModifyQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ModifyQueueRequest) GetId() *QueueId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ModifyQueueRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ModifyQueueRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type ModifyQueueResponse struct {
}

func (m *ModifyQueueResponse) Reset()                    { *m = ModifyQueueResponse{} }
func (m *ModifyQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyQueueResponse) ProtoMessage()               {}
func (*ModifyQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type PurgeQueueRequest struct {
	Id         *QueueId `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	RPCTimeout int64    `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *PurgeQueueRequest) Reset()                    { *m = PurgeQueueRequest{} }
func (m *PurgeQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgeQueueRequest) ProtoMessage()               {}
func (*PurgeQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PurgeQueueRequest) GetId() *QueueId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PurgeQueueRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type PurgeQueueResponse struct {
}

func (m *PurgeQueueResponse) Reset()                    { *m = PurgeQueueResponse{} }
func (m *PurgeQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*PurgeQueueResponse) ProtoMessage()               {}
func (*PurgeQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type MessageReceipt struct {
	Id           string `protobuf:"bytes,1,opt,name=Id" json:"Id"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=ErrorMessage" json:"ErrorMessage"`
	Partition    string `protobuf:"bytes,3,opt,name=Partition" json:"Partition"`
}

func (m *MessageReceipt) Reset()                    { *m = MessageReceipt{} }
func (m *MessageReceipt) String() string            { return proto.CompactTextString(m) }
func (*MessageReceipt) ProtoMessage()               {}
func (*MessageReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MessageReceipt) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageReceipt) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *MessageReceipt) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type FailedPublish struct {
	Index        int64  `protobuf:"varint,1,opt,name=Index" json:"Index"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=ErrorMessage" json:"ErrorMessage"`
}

func (m *FailedPublish) Reset()                    { *m = FailedPublish{} }
func (m *FailedPublish) String() string            { return proto.CompactTextString(m) }
func (*FailedPublish) ProtoMessage()               {}
func (*FailedPublish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FailedPublish) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *FailedPublish) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type Message struct {
	Data       string            `protobuf:"bytes,1,opt,name=Data" json:"Data"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=Attributes" json:"Attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Receipt    *MessageReceipt   `protobuf:"bytes,100,opt,name=Receipt" json:"Receipt"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Message) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Message) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Message) GetReceipt() *MessageReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type AckMessagesRequest struct {
	QueueId    *QueueId          `protobuf:"bytes,1,opt,name=QueueId" json:"QueueId"`
	Receipts   []*MessageReceipt `protobuf:"bytes,2,rep,name=Receipts" json:"Receipts"`
	RPCTimeout int64             `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *AckMessagesRequest) Reset()                    { *m = AckMessagesRequest{} }
func (m *AckMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*AckMessagesRequest) ProtoMessage()               {}
func (*AckMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AckMessagesRequest) GetQueueId() *QueueId {
	if m != nil {
		return m.QueueId
	}
	return nil
}

func (m *AckMessagesRequest) GetReceipts() []*MessageReceipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *AckMessagesRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type AckMessagesResponse struct {
	// Return the receipts that failed to ack
	Failed []*MessageReceipt `protobuf:"bytes,1,rep,name=Failed" json:"Failed"`
}

func (m *AckMessagesResponse) Reset()                    { *m = AckMessagesResponse{} }
func (m *AckMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*AckMessagesResponse) ProtoMessage()               {}
func (*AckMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AckMessagesResponse) GetFailed() []*MessageReceipt {
	if m != nil {
		return m.Failed
	}
	return nil
}

type GetMessagesRequest struct {
	QueueId *QueueId `protobuf:"bytes,1,opt,name=QueueId" json:"QueueId"`
	// How long to poll for up to MaxMessages messages. 0 implies return immediately
	LongPollSeconds    int64 `protobuf:"varint,2,opt,name=LongPollSeconds" json:"LongPollSeconds"`
	MaxMessages        int64 `protobuf:"varint,3,opt,name=MaxMessages" json:"MaxMessages"`
	AckDeadlineSeconds int64 `protobuf:"varint,4,opt,name=AckDeadlineSeconds" json:"AckDeadlineSeconds"`
	RPCTimeout         int64 `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *GetMessagesRequest) Reset()                    { *m = GetMessagesRequest{} }
func (m *GetMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMessagesRequest) ProtoMessage()               {}
func (*GetMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetMessagesRequest) GetQueueId() *QueueId {
	if m != nil {
		return m.QueueId
	}
	return nil
}

func (m *GetMessagesRequest) GetLongPollSeconds() int64 {
	if m != nil {
		return m.LongPollSeconds
	}
	return 0
}

func (m *GetMessagesRequest) GetMaxMessages() int64 {
	if m != nil {
		return m.MaxMessages
	}
	return 0
}

func (m *GetMessagesRequest) GetAckDeadlineSeconds() int64 {
	if m != nil {
		return m.AckDeadlineSeconds
	}
	return 0
}

func (m *GetMessagesRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type GetMessagesResponse struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=Messages" json:"Messages"`
}

func (m *GetMessagesResponse) Reset()                    { *m = GetMessagesResponse{} }
func (m *GetMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMessagesResponse) ProtoMessage()               {}
func (*GetMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetMessagesResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PublishMessagesRequest struct {
	QueueId    *QueueId   `protobuf:"bytes,1,opt,name=QueueId" json:"QueueId"`
	Messages   []*Message `protobuf:"bytes,2,rep,name=Messages" json:"Messages"`
	RPCTimeout int64      `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *PublishMessagesRequest) Reset()                    { *m = PublishMessagesRequest{} }
func (m *PublishMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishMessagesRequest) ProtoMessage()               {}
func (*PublishMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PublishMessagesRequest) GetQueueId() *QueueId {
	if m != nil {
		return m.QueueId
	}
	return nil
}

func (m *PublishMessagesRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *PublishMessagesRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type PublishMessagesResponse struct {
	// Return the indexes of the messages that failed to send
	Failed []*FailedPublish `protobuf:"bytes,1,rep,name=Failed" json:"Failed"`
}

func (m *PublishMessagesResponse) Reset()                    { *m = PublishMessagesResponse{} }
func (m *PublishMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishMessagesResponse) ProtoMessage()               {}
func (*PublishMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PublishMessagesResponse) GetFailed() []*FailedPublish {
	if m != nil {
		return m.Failed
	}
	return nil
}

type ModifyAckDeadlineRequest struct {
	QueueId            *QueueId        `protobuf:"bytes,1,opt,name=QueueId" json:"QueueId"`
	Receipt            *MessageReceipt `protobuf:"bytes,2,opt,name=Receipt" json:"Receipt"`
	AckDeadlineSeconds int64           `protobuf:"varint,3,opt,name=AckDeadlineSeconds" json:"AckDeadlineSeconds"`
	RPCTimeout         int64           `protobuf:"varint,100,opt,name=RPCTimeout" json:"RPCTimeout"`
}

func (m *ModifyAckDeadlineRequest) Reset()                    { *m = ModifyAckDeadlineRequest{} }
func (m *ModifyAckDeadlineRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyAckDeadlineRequest) ProtoMessage()               {}
func (*ModifyAckDeadlineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ModifyAckDeadlineRequest) GetQueueId() *QueueId {
	if m != nil {
		return m.QueueId
	}
	return nil
}

func (m *ModifyAckDeadlineRequest) GetReceipt() *MessageReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *ModifyAckDeadlineRequest) GetAckDeadlineSeconds() int64 {
	if m != nil {
		return m.AckDeadlineSeconds
	}
	return 0
}

func (m *ModifyAckDeadlineRequest) GetRPCTimeout() int64 {
	if m != nil {
		return m.RPCTimeout
	}
	return 0
}

type ModifyAckDeadlineResponse struct {
}

func (m *ModifyAckDeadlineResponse) Reset()                    { *m = ModifyAckDeadlineResponse{} }
func (m *ModifyAckDeadlineResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyAckDeadlineResponse) ProtoMessage()               {}
func (*ModifyAckDeadlineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type HealthcheckRequest struct {
}

func (m *HealthcheckRequest) Reset()                    { *m = HealthcheckRequest{} }
func (m *HealthcheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthcheckRequest) ProtoMessage()               {}
func (*HealthcheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type HealthcheckResponse struct {
}

func (m *HealthcheckResponse) Reset()                    { *m = HealthcheckResponse{} }
func (m *HealthcheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthcheckResponse) ProtoMessage()               {}
func (*HealthcheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func init() {
	proto.RegisterType((*QueueId)(nil), "rpc.QueueId")
	proto.RegisterType((*ListQueuesRequest)(nil), "rpc.ListQueuesRequest")
	proto.RegisterType((*ListQueuesResponse)(nil), "rpc.ListQueuesResponse")
	proto.RegisterType((*GetQueueRequest)(nil), "rpc.GetQueueRequest")
	proto.RegisterType((*GetQueueResponse)(nil), "rpc.GetQueueResponse")
	proto.RegisterType((*CreateQueueRequest)(nil), "rpc.CreateQueueRequest")
	proto.RegisterType((*CreateQueueResponse)(nil), "rpc.CreateQueueResponse")
	proto.RegisterType((*DeleteQueueRequest)(nil), "rpc.DeleteQueueRequest")
	proto.RegisterType((*DeleteQueueResponse)(nil), "rpc.DeleteQueueResponse")
	proto.RegisterType((*ModifyQueueRequest)(nil), "rpc.ModifyQueueRequest")
	proto.RegisterType((*ModifyQueueResponse)(nil), "rpc.ModifyQueueResponse")
	proto.RegisterType((*PurgeQueueRequest)(nil), "rpc.PurgeQueueRequest")
	proto.RegisterType((*PurgeQueueResponse)(nil), "rpc.PurgeQueueResponse")
	proto.RegisterType((*MessageReceipt)(nil), "rpc.MessageReceipt")
	proto.RegisterType((*FailedPublish)(nil), "rpc.FailedPublish")
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*AckMessagesRequest)(nil), "rpc.AckMessagesRequest")
	proto.RegisterType((*AckMessagesResponse)(nil), "rpc.AckMessagesResponse")
	proto.RegisterType((*GetMessagesRequest)(nil), "rpc.GetMessagesRequest")
	proto.RegisterType((*GetMessagesResponse)(nil), "rpc.GetMessagesResponse")
	proto.RegisterType((*PublishMessagesRequest)(nil), "rpc.PublishMessagesRequest")
	proto.RegisterType((*PublishMessagesResponse)(nil), "rpc.PublishMessagesResponse")
	proto.RegisterType((*ModifyAckDeadlineRequest)(nil), "rpc.ModifyAckDeadlineRequest")
	proto.RegisterType((*ModifyAckDeadlineResponse)(nil), "rpc.ModifyAckDeadlineResponse")
	proto.RegisterType((*HealthcheckRequest)(nil), "rpc.HealthcheckRequest")
	proto.RegisterType((*HealthcheckResponse)(nil), "rpc.HealthcheckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QProxy service

type QProxyClient interface {
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (QProxy_ListQueuesClient, error)
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	ModifyQueue(ctx context.Context, in *ModifyQueueRequest, opts ...grpc.CallOption) (*ModifyQueueResponse, error)
	PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error)
	AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	PublishMessages(ctx context.Context, in *PublishMessagesRequest, opts ...grpc.CallOption) (*PublishMessagesResponse, error)
	ModifyAckDeadline(ctx context.Context, in *ModifyAckDeadlineRequest, opts ...grpc.CallOption) (*ModifyAckDeadlineResponse, error)
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
}

type qProxyClient struct {
	cc *grpc.ClientConn
}

func NewQProxyClient(cc *grpc.ClientConn) QProxyClient {
	return &qProxyClient{cc}
}

func (c *qProxyClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (QProxy_ListQueuesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_QProxy_serviceDesc.Streams[0], c.cc, "/rpc.QProxy/ListQueues", opts...)
	if err != nil {
		return nil, err
	}
	x := &qProxyListQueuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QProxy_ListQueuesClient interface {
	Recv() (*ListQueuesResponse, error)
	grpc.ClientStream
}

type qProxyListQueuesClient struct {
	grpc.ClientStream
}

func (x *qProxyListQueuesClient) Recv() (*ListQueuesResponse, error) {
	m := new(ListQueuesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qProxyClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	out := new(GetQueueResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/GetQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	out := new(CreateQueueResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/CreateQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	out := new(DeleteQueueResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/DeleteQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) ModifyQueue(ctx context.Context, in *ModifyQueueRequest, opts ...grpc.CallOption) (*ModifyQueueResponse, error) {
	out := new(ModifyQueueResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/ModifyQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error) {
	out := new(PurgeQueueResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/PurgeQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error) {
	out := new(AckMessagesResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/AckMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/GetMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) PublishMessages(ctx context.Context, in *PublishMessagesRequest, opts ...grpc.CallOption) (*PublishMessagesResponse, error) {
	out := new(PublishMessagesResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/PublishMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) ModifyAckDeadline(ctx context.Context, in *ModifyAckDeadlineRequest, opts ...grpc.CallOption) (*ModifyAckDeadlineResponse, error) {
	out := new(ModifyAckDeadlineResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/ModifyAckDeadline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qProxyClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := grpc.Invoke(ctx, "/rpc.QProxy/Healthcheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QProxy service

type QProxyServer interface {
	ListQueues(*ListQueuesRequest, QProxy_ListQueuesServer) error
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	ModifyQueue(context.Context, *ModifyQueueRequest) (*ModifyQueueResponse, error)
	PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error)
	AckMessages(context.Context, *AckMessagesRequest) (*AckMessagesResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	PublishMessages(context.Context, *PublishMessagesRequest) (*PublishMessagesResponse, error)
	ModifyAckDeadline(context.Context, *ModifyAckDeadlineRequest) (*ModifyAckDeadlineResponse, error)
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
}

func RegisterQProxyServer(s *grpc.Server, srv QProxyServer) {
	s.RegisterService(&_QProxy_serviceDesc, srv)
}

func _QProxy_ListQueues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQueuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QProxyServer).ListQueues(m, &qProxyListQueuesServer{stream})
}

type QProxy_ListQueuesServer interface {
	Send(*ListQueuesResponse) error
	grpc.ServerStream
}

type qProxyListQueuesServer struct {
	grpc.ServerStream
}

func (x *qProxyListQueuesServer) Send(m *ListQueuesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QProxy_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_ModifyQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).ModifyQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/ModifyQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).ModifyQueue(ctx, req.(*ModifyQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_PurgeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).PurgeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/PurgeQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).PurgeQueue(ctx, req.(*PurgeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_AckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).AckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/AckMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).AckMessages(ctx, req.(*AckMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_PublishMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).PublishMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/PublishMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).PublishMessages(ctx, req.(*PublishMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_ModifyAckDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAckDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).ModifyAckDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/ModifyAckDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).ModifyAckDeadline(ctx, req.(*ModifyAckDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QProxy_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QProxyServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QProxy/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QProxyServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.QProxy",
	HandlerType: (*QProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueue",
			Handler:    _QProxy_GetQueue_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _QProxy_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _QProxy_DeleteQueue_Handler,
		},
		{
			MethodName: "ModifyQueue",
			Handler:    _QProxy_ModifyQueue_Handler,
		},
		{
			MethodName: "PurgeQueue",
			Handler:    _QProxy_PurgeQueue_Handler,
		},
		{
			MethodName: "AckMessages",
			Handler:    _QProxy_AckMessages_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _QProxy_GetMessages_Handler,
		},
		{
			MethodName: "PublishMessages",
			Handler:    _QProxy_PublishMessages_Handler,
		},
		{
			MethodName: "ModifyAckDeadline",
			Handler:    _QProxy_ModifyAckDeadline_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _QProxy_Healthcheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListQueues",
			Handler:       _QProxy_ListQueues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/qproxy.proto",
}

func init() { proto.RegisterFile("rpc/qproxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xd6, 0xc4, 0x25, 0x6d, 0x5f, 0x97, 0x6d, 0x3b, 0xe9, 0x8f, 0x90, 0x86, 0x92, 0x1d, 0xb1,
	0x6c, 0x54, 0x44, 0x02, 0xe5, 0x82, 0x02, 0x08, 0x2d, 0xdb, 0x6e, 0x89, 0xb4, 0x85, 0xd4, 0x20,
	0x71, 0x44, 0x53, 0x7b, 0x48, 0xad, 0xb8, 0xb6, 0x6b, 0x4f, 0x56, 0xad, 0xb8, 0x71, 0x44, 0xe2,
	0xc4, 0x85, 0x7f, 0x87, 0x23, 0x67, 0x2e, 0x88, 0x33, 0xff, 0x02, 0x77, 0xe4, 0xf1, 0x8b, 0x33,
	0x8e, 0xa7, 0x0d, 0xed, 0x56, 0xe2, 0x16, 0xcf, 0x7b, 0x7e, 0xdf, 0x7b, 0xdf, 0xf3, 0x7c, 0xef,
	0x05, 0xd6, 0xe2, 0xc8, 0xe9, 0x5e, 0x44, 0x71, 0x78, 0x79, 0xd5, 0x89, 0xe2, 0x50, 0x86, 0xd4,
	0x8a, 0x23, 0xa7, 0xd1, 0x1c, 0x86, 0xe1, 0xd0, 0x17, 0x5d, 0x1e, 0x79, 0x5d, 0x1e, 0x04, 0xa1,
	0xe4, 0xd2, 0x0b, 0x83, 0x24, 0x73, 0x61, 0x1f, 0xc3, 0xe2, 0xc9, 0x58, 0x8c, 0x45, 0xdf, 0xa5,
	0x4d, 0x58, 0xfe, 0x92, 0x9f, 0x8b, 0x24, 0xe2, 0x8e, 0xa8, 0x93, 0x16, 0x69, 0x2f, 0xdb, 0xd3,
	0x03, 0x4a, 0x61, 0x21, 0x7d, 0xa8, 0x57, 0x94, 0x41, 0xfd, 0x66, 0x1e, 0xac, 0xbf, 0xf0, 0x12,
	0xa9, 0x02, 0x24, 0xb6, 0xb8, 0x18, 0x8b, 0x44, 0xce, 0x09, 0xb3, 0x05, 0xd5, 0xe7, 0x9e, 0x2f,
	0x45, 0x8c, 0x81, 0xf0, 0x89, 0xee, 0x02, 0xd8, 0x83, 0x67, 0xdf, 0x78, 0xe7, 0x22, 0x1c, 0xcb,
	0xba, 0xdb, 0x22, 0x6d, 0xcb, 0xd6, 0x4e, 0x58, 0x0f, 0xa8, 0x0e, 0x95, 0x44, 0x61, 0x90, 0x08,
	0xfa, 0x36, 0x54, 0xb3, 0x93, 0x3a, 0x69, 0x59, 0xed, 0x95, 0xfd, 0x07, 0x9d, 0x38, 0x72, 0x3a,
	0x58, 0x90, 0x8d, 0x36, 0xf6, 0x15, 0xac, 0x1e, 0x89, 0xec, 0xd5, 0x69, 0x92, 0x95, 0xbe, 0xab,
	0xb2, 0x9b, 0x7d, 0xa9, 0xd2, 0x77, 0xe7, 0x26, 0xf3, 0x2b, 0x81, 0xb5, 0x69, 0x44, 0xcc, 0xe5,
	0x10, 0xe0, 0xa9, 0x94, 0xb1, 0x77, 0x3a, 0x96, 0x79, 0x3e, 0x8f, 0x55, 0xe8, 0x59, 0xd7, 0xce,
	0xd4, 0xef, 0x30, 0x90, 0xf1, 0x95, 0xad, 0xbd, 0xd8, 0xf8, 0x14, 0x56, 0x67, 0xcc, 0x74, 0x0d,
	0xac, 0x91, 0xb8, 0x42, 0x2e, 0xd3, 0x9f, 0x74, 0x03, 0x5e, 0x7b, 0xc9, 0xfd, 0xf1, 0xa4, 0x1b,
	0xd9, 0x43, 0xaf, 0xf2, 0x11, 0x61, 0x7f, 0x11, 0xa0, 0xcf, 0x62, 0xc1, 0xa5, 0xb8, 0x45, 0xbd,
	0x47, 0x85, 0xd4, 0x2b, 0x2a, 0xf5, 0x27, 0xca, 0xab, 0x1c, 0xea, 0xa6, 0xe4, 0xe7, 0x11, 0xf7,
	0xaa, 0xc5, 0x6d, 0x42, 0xad, 0x90, 0x50, 0x46, 0x27, 0xb3, 0x81, 0x1e, 0x08, 0x5f, 0xdc, 0xaa,
	0xe4, 0x79, 0x2d, 0xde, 0x84, 0x5a, 0x21, 0x26, 0x42, 0xa5, 0xf4, 0x1e, 0x87, 0xae, 0xf7, 0xfd,
	0xd5, 0xbd, 0xd0, 0x5b, 0x0e, 0xf5, 0x3f, 0xd3, 0x5b, 0x48, 0x08, 0x6b, 0x3e, 0x81, 0xf5, 0xc1,
	0x38, 0x1e, 0xde, 0x27, 0xbb, 0x1b, 0x40, 0xf5, 0x90, 0x08, 0x74, 0x0a, 0x0f, 0x8f, 0x45, 0x92,
	0xf0, 0xa1, 0xb0, 0x85, 0x23, 0xbc, 0x48, 0xd2, 0x87, 0x39, 0xca, 0xb2, 0x8a, 0xcb, 0xe0, 0xc1,
	0x61, 0x1c, 0x87, 0x31, 0xba, 0x61, 0x09, 0x85, 0xb3, 0x54, 0x7f, 0x06, 0x3c, 0x96, 0x5e, 0xaa,
	0x72, 0x75, 0x2b, 0xd3, 0x9f, 0xfc, 0x80, 0xf5, 0xe1, 0xf5, 0xe7, 0xdc, 0xf3, 0x85, 0x3b, 0x18,
	0x9f, 0xfa, 0x5e, 0x72, 0x96, 0xd2, 0xd1, 0x0f, 0x5c, 0x71, 0xa9, 0x50, 0x2c, 0x3b, 0x7b, 0xf8,
	0x2f, 0x40, 0xec, 0x77, 0x02, 0x8b, 0x13, 0x50, 0x0a, 0x0b, 0x07, 0x5c, 0x72, 0x4c, 0x55, 0xfd,
	0xa6, 0x9f, 0x18, 0xda, 0xde, 0xcc, 0xda, 0x9e, 0xbd, 0x75, 0x63, 0xaf, 0xdf, 0x83, 0x45, 0x64,
	0x41, 0xf1, 0xb7, 0xb2, 0x5f, 0xd3, 0x5f, 0x45, 0x93, 0x3d, 0xf1, 0x79, 0xd5, 0xd6, 0xff, 0x4c,
	0x80, 0x3e, 0x75, 0x46, 0x18, 0x3d, 0xd7, 0xf2, 0x77, 0xf2, 0xe9, 0x60, 0x6c, 0x75, 0x3e, 0x3a,
	0xba, 0xb0, 0x84, 0x89, 0x4c, 0x0a, 0x35, 0x66, 0x9b, 0x3b, 0xcd, 0xfd, 0x40, 0x3e, 0x87, 0x5a,
	0x21, 0x1d, 0xd4, 0xd8, 0x77, 0xa1, 0x9a, 0x75, 0x0f, 0xf5, 0xd5, 0x88, 0x82, 0x2e, 0xec, 0x4f,
	0x02, 0xf4, 0x48, 0xc8, 0xbb, 0xd6, 0xd4, 0x86, 0xd5, 0x17, 0x61, 0x30, 0x1c, 0x84, 0xbe, 0xff,
	0xb5, 0x70, 0xc2, 0xc0, 0x4d, 0x14, 0x6d, 0x96, 0x3d, 0x7b, 0x4c, 0x5b, 0xb0, 0x72, 0xcc, 0x2f,
	0x27, 0x38, 0xea, 0x9b, 0xb3, 0x6c, 0xfd, 0x88, 0x76, 0x14, 0xbb, 0x07, 0x82, 0xbb, 0xbe, 0x17,
	0x88, 0x49, 0xb8, 0x05, 0xe5, 0x68, 0xb0, 0xcc, 0xa5, 0xe7, 0x33, 0xa8, 0x15, 0x2a, 0x43, 0x7a,
	0xda, 0xb0, 0x94, 0x67, 0xa1, 0x0f, 0xc4, 0x09, 0x41, 0xb9, 0x95, 0xfd, 0x44, 0x60, 0x0b, 0x6f,
	0xc0, 0xdd, 0xf9, 0x99, 0x82, 0x55, 0x6e, 0x02, 0x9b, 0x5b, 0xcd, 0x21, 0x6c, 0x97, 0x72, 0xc1,
	0x8a, 0xf6, 0x66, 0x1a, 0x4e, 0x15, 0x44, 0xe1, 0x06, 0xe7, 0xfd, 0xfe, 0x8d, 0x40, 0x3d, 0xd3,
	0x2f, 0x8d, 0xd1, 0xdb, 0x56, 0xa5, 0x5d, 0xbb, 0xca, 0xfc, 0x6b, 0x77, 0x4d, 0x63, 0xad, 0x3b,
	0x37, 0x76, 0x07, 0xde, 0x30, 0x94, 0x80, 0xfa, 0xb8, 0x01, 0xf4, 0x0b, 0xc1, 0x7d, 0x79, 0xe6,
	0x9c, 0x09, 0x67, 0x84, 0x95, 0xa5, 0xaa, 0x5d, 0x38, 0xcd, 0x9c, 0xf7, 0xff, 0x59, 0x82, 0xea,
	0xc9, 0x20, 0x5d, 0x06, 0x29, 0x07, 0x98, 0xee, 0x4e, 0x74, 0x4b, 0x15, 0x54, 0xda, 0xdb, 0x1a,
	0xdb, 0xa5, 0x73, 0x84, 0x6d, 0xfd, 0xf8, 0xc7, 0xdf, 0xbf, 0x54, 0x1a, 0x6c, 0xb3, 0xfb, 0xf2,
	0x03, 0xdc, 0x2f, 0xbb, 0xbe, 0x97, 0xc8, 0x0b, 0xe5, 0xd6, 0x23, 0x7b, 0xef, 0x13, 0xfa, 0x2d,
	0x2c, 0x4d, 0xb6, 0x1c, 0xba, 0x31, 0xb3, 0xf4, 0x64, 0xe1, 0x37, 0x8d, 0xab, 0x10, 0xdb, 0x55,
	0xc1, 0xeb, 0xac, 0xa6, 0x05, 0x1f, 0x8a, 0x2c, 0x76, 0x8f, 0xec, 0x51, 0x07, 0x56, 0xb4, 0x91,
	0x4f, 0xb7, 0xaf, 0xd9, 0x4a, 0x1a, 0xf5, 0xb2, 0x01, 0x11, 0x1e, 0x29, 0x84, 0x1d, 0xb6, 0xa5,
	0x21, 0x38, 0xca, 0x4f, 0x07, 0xd1, 0x86, 0x3d, 0x82, 0x94, 0x57, 0x0a, 0x04, 0x31, 0xed, 0x05,
	0x26, 0x10, 0x57, 0xf9, 0xe9, 0x20, 0xda, 0x74, 0x45, 0x90, 0xf2, 0x02, 0x80, 0x20, 0xa6, 0x41,
	0x6c, 0x02, 0x39, 0x57, 0x7e, 0x39, 0xc8, 0x77, 0x00, 0xd3, 0xc1, 0x8a, 0xad, 0x2e, 0x0d, 0x6f,
	0x6c, 0xb5, 0x61, 0x02, 0x9b, 0x5a, 0x1d, 0xa5, 0x6e, 0x7a, 0x15, 0x9a, 0x30, 0x63, 0x15, 0xe5,
	0xc9, 0x81, 0x55, 0x18, 0x34, 0xdc, 0x58, 0x05, 0x77, 0x46, 0xe7, 0xe8, 0x87, 0x20, 0x9a, 0xbc,
	0x21, 0x48, 0x59, 0xca, 0x11, 0xc4, 0xa0, 0x84, 0x46, 0x90, 0xa1, 0x90, 0x3a, 0x48, 0x02, 0xab,
	0x33, 0xaa, 0x43, 0x77, 0x90, 0x17, 0x93, 0x2e, 0x36, 0x9a, 0x66, 0x23, 0x02, 0x3e, 0x56, 0x80,
	0x6f, 0xb1, 0x46, 0x81, 0x39, 0xe5, 0xab, 0x83, 0xfe, 0x00, 0xeb, 0xa5, 0xfb, 0x4d, 0xdf, 0xd4,
	0x3a, 0x5e, 0x96, 0xae, 0xc6, 0xee, 0x75, 0x66, 0x84, 0x7e, 0xa2, 0xa0, 0x1f, 0xb1, 0x66, 0xe9,
	0xb3, 0xe0, 0xce, 0xc8, 0x45, 0x6f, 0xa4, 0x55, 0x53, 0x0a, 0xa4, 0xb5, 0xac, 0x28, 0x48, 0xab,
	0x41, 0x54, 0x8c, 0xb4, 0x9e, 0x4d, 0xfd, 0x7a, 0x64, 0xef, 0xb4, 0xaa, 0xfe, 0x57, 0x7e, 0xf8,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xc8, 0xa2, 0x07, 0x8e, 0x0e, 0x00, 0x00,
}
